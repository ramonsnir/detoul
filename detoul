#!/bin/bash

if [ -t 1 -o "$DETOUL_COLOR_ALWAYS" == "1" ]; then
  remove_colors="cat"
else
  remove_colors=$(cat <<"EOF"
sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mK]//g"
EOF
               )
fi

exit_code="0"

# http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
export PATH="$PATH:$(cd "$( dirname "$SOURCE" )" && pwd -P)"

export GIT_WD="$(git-pwd)"

cd "$GIT_WD"

if [ "$GIT_REMOTE" == "" ]; then
  export GIT_REMOTE="$(git remote | xargs echo | head -n 1)"
fi
export DETOUL_ORIG_BRANCH="$(git branch | grep "^*" | cut -c3-)"

export DETOUL_TMP=".git/detoul.$(echo "$RANDOM$RANDOM" | git hash-object --stdin)"
mkdir "$DETOUL_TMP"

# we prefer the local config value, if git supports that
if (git config --local -l >/dev/null 2>&1); then
  export DETOUL_ORIG_RERERE_ENABLE="$(git config --local rerere.enabled)"
  export DETOUL_ORIG_RERERE_AUTOUPDATE="$(git config --local rerere.autoupdate)"
else
  export DETOUL_ORIG_RERERE_ENABLE="$(git config rerere.enabled)"
  export DETOUL_ORIG_RERERE_AUTOUPDATE="$(git config rerere.autoupdate)"
fi
git config rerere.enabled true
git config rerere.autoupdate true
mkdir -p .git/rr-cache
mv .git/rr-cache "$DETOUL_TMP/orig-rr-cache" 2>/dev/null

stash() {
  cd "$GIT_WD"

  rm "$DETOUL_TMP/stash" >/dev/null 2>&1

  have_uncommitted_changes="$(git status --porcelain | wc -l)"
  if [ "$have_uncommitted_changes" != "0" ]; then
    git stash -u >/dev/null 2>&1
    touch "$DETOUL_TMP/stash" >/dev/null 2>&1
  fi
}

stash-pop() {
  git checkout "$DETOUL_ORIG_BRANCH" >/dev/null 2>&1

  if [ -f "$DETOUL_TMP/stash" ]; then
    rm "$DETOUL_TMP/stash" >/dev/null 2>&1
    git stash pop --index >/dev/null 2>&1
  fi
}

quit() {
  cd "$GIT_WD"
  echo "$exit_code" >"$DETOUL_TMP/exitcode"
  exit "$exit_code"
}

fail() {
  exit_code="1"
  quit
}

help() {
  echo "detoul: a declarative tool for creating integration branches in git"
  echo "Usage:"
  echo "    detoul init"
  echo "    detoul specs-push"
  echo "    detoul specs-pull"
  echo "    detoul create <release> [<base_branch>]"
  echo "    detoul (test|make) <release>"
  echo "    detoul add-to <release> <branch> [--squash] [--merge] [--message \"<message>\"]"
  echo "    detoul cat (<release>|<archived-release>)"
  echo "    detoul edit <release> [--amend]"
  echo "    detoul push <release>"
  echo "    detoul archive <release>"
  echo "    detoul unarchive <archived-release>"
  echo "    detoul help"
  quit
}

load-spec() {
  local load_detoul_spec_output
  load_detoul_spec_output="$(load-detoul-spec $1)"
  if [ "$?" != "0" ]; then
    echo -e "$load_detoul_spec_output" >&2
    fail
  fi
}

save-spec() {
  stash
  (
    git checkout detoul-spec &&
      (cat "$DETOUL_TMP/spec" | head -n -1 | grep -v "^$" > "$target" || [ 1 -eq 1 ]) &&
      cat "$DETOUL_TMP/spec" | tail -n 1 | tr -d '\n' >> "$target" &&
      git add "$target" &&
      git commit -m "$1" $commit_opts
  ) >/dev/null 2>&1
  stash-pop
  cd - >/dev/null
}

((

  if [ $# -lt 1 ]; then
    help
  fi

  export DETOUL_BRANCH="$2"

  case "$1" in
    help)
      help
      ;;
    commands)
      echo "add-to"
      echo "archive"
      echo "cat"
      echo "create"
      echo "edit"
      echo "init"
      echo "help"
      echo "make"
      echo "push"
      echo "specs-pull"
      echo "specs-push"
      echo "test"
      echo "unarchive"
      quit
      ;;
    options)
      case "$2" in
        create)
        ;;
        edit)
          echo "--amend"
          ;;
        add-to)
          echo "--merge"
          echo "--message"
          echo "--squash"
          ;;
      esac
      quit
      ;;
    init)
      stash
      (
        git symbolic-ref HEAD refs/heads/detoul-spec &&
          rm .git/index &&
          git clean -fdx &&
          echo "thisimage binary" >> .gitattributes &&
          echo "preimage binary" >> .gitattributes &&
          echo "postimage binary" >> .gitattributes &&
          git add .gitattributes &&
          git commit -m "detoul-spec"
      ) >/dev/null 2>&1
      stash-pop
      quit
      ;;
    create)
      target="$2"
      base_branch="$3"
      if [ "$base_branch" == "" ]; then
        touch "$DETOUL_TMP/spec"
        save-spec "created '$target'"
      else
        echo -n "checkout $base_branch" > "$DETOUL_TMP/spec"
        save-spec "created '$target' based on '$base_branch'"
      fi
      quit
      ;;
    cat)
      load-spec archived
      cat "$DETOUL_TMP/spec"
      quit
      ;;
    edit)
      target="$2"
      commit_opts="$3"
      load-spec
      if [ "$EDITOR" == "" ]; then
        EDITOR="vi"
      fi
      $EDITOR "$DETOUL_TMP/spec"
      save-spec "edited '$target'"
      quit
      ;;
    add-to)
      target="$2"
      load-spec
      addition="$3"
      op="take"
      mod=""
      message=""
      shift; shift; shift
      while (($#)); do
        case "$1" in
          --merge)
            mod="-merge"
            ;;
          --squash)
            mod="-squash"
            ;;
          -m|--message)
            shift
            message=" $1"
        esac
        shift
      done
      echo "" >> "$DETOUL_TMP/spec"
      echo -n "$op$mod $addition$message" >> "$DETOUL_TMP/spec"
      save-spec "added to '$target': '$addition'"
      quit
      ;;
    specs-push)
      stash
      git checkout detoul-spec >/dev/null 2>&1 &&
        git push -f
      stash-pop
      cd - >/dev/null
      quit
      ;;
    specs-pull)
      stash
      git checkout detoul-spec >/dev/null 2>&1 &&
        git pull
      stash-pop
      cd - >/dev/null
      quit
      ;;
    archive)
      stash
      git checkout detoul-spec >/dev/null 2>&1 &&
        mkdir -p .archive &&
        mv "$2" .archive/ &&
        git add .archive &&
        git add "$2" &&
        git commit -m "archived '$2'" >/dev/null
      stash-pop
      cd - >/dev/null
      quit
      ;;
    unarchive)
      stash
      git checkout detoul-spec >/dev/null 2>&1 &&
        mv ".archive/$2" . &&
        (rmdir .archive 2>/dev/null || [ 1 -eq 1 ]) &&
        git add .archive &&
        git add "$2" &&
        git commit -m "unarchived '$2'" >/dev/null
      stash-pop
      cd - >/dev/null
      quit
      ;;
  esac

  load-spec filtered
  
  stash

  detoul-base <"$DETOUL_TMP/spec"
  exit_code="$?"
  stash-pop

  cd "$GIT_WD"

  if [ "$exit_code" == "0" ]; then
    case "$1" in
      test)
        git branch -D "$DETOUL_BRANCH" >/dev/null 2>&1
        echo -e "\033[32mIntegration branch succesfully created.\033[0m"
        ;;
      make)
        git checkout "$DETOUL_BRANCH" >/dev/null 2>&1
        ;;
      push)
        git checkout "$DETOUL_BRANCH" >/dev/null 2>&1
        git push --set-upstream "$GIT_REMOTE" "$DETOUL_BRANCH" --force
        git checkout "$DETOUL_ORIG_BRANCH" >/dev/null 2>&1
        ;;
      *)
        git branch -D "$DETOUL_BRANCH" >/dev/null 2>&1
        echo -e "\033[31mUnknown operation '$1'.\033[0m" >&2
        fail
    esac
    quit
  else
    if [ "$1" == "test" ]; then
      git rebase --abort >/dev/null 2>&1
      git checkout "$DETOUL_ORIG_BRANCH" >/dev/null 2>&1
      stash-pop
    fi
    git branch -D "$DETOUL_BRANCH" >/dev/null 2>&1
    echo -e "\033[31mFailure.\033[0m" >&2
    fail
  fi

) 2>&1 1>&3 | bash -c "$remove_colors" 1>&2) 3>&1 | bash -c "$remove_colors"

exit_code="$(cat "$DETOUL_TMP/exitcode")"
if [ "$DETOUL_ORIG_RERERE_ENABLE" == "" ]; then
  git config --unset rerere.enabled
else
  git config rerere.enabled "$DETOUL_ORIG_RERERE_ENABLE"
fi
if [ "$DETOUL_ORIG_RERERE_AUTOUPDATE" == "" ]; then
  git config --unset rerere.autoupdate
else
  git config rerere.autoupdate "$DETOUL_ORIG_RERERE_AUTOUPDATE"
fi

# copy unresolved conflicts to the original rr-cache
if [ "$1" != "test" -a -f .git/MERGE_RR ]; then
  mkdir -p .git/rr-cache
  for conflict in $(cat .git/MERGE_RR | tr '\0' '\n' | cut -f1); do
    cp -a ".git/rr-cache/$conflict/." "$DETOUL_TMP/orig-rr-cache/$conflict/" 2>/dev/null
  done
fi

rm -fr .git/rr-cache 2>/dev/null
mv "$DETOUL_TMP/orig-rr-cache" .git/rr-cache 2>/dev/null
rm -fr "$DETOUL_TMP"
exit "$exit_code"
