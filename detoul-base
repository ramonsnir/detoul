#!/bin/bash

exit_code="0"
first_command="1"

quit() {
  exit "$exit_code"
}

fail() {
  exit_code="1"
  quit
}

# does nothing if $1 isn't a detoul spec name
make-detoul-dependency() {
  exit_code_file="$DETOUL_TMP/intexitcode"
  echo "1" >"$exit_code_file"
  prepare-rerere-cache
  ((
    export DETOUL_COLOR_ALWAYS="1"
    if ( detoul cat "$1" >/dev/null 2>&1 ); then
      if ( git ls-tree detoul-spec | grep -q "\s$1$" ); then
        echo -e "Making spec '\033[92m$1\033[0m...'" &&
          detoul make "$1" &&
          echo "0" >"$exit_code_file"
      else
        echo -e "\033[93mWarning: there is an archived detoul spec called '\033[92m$1\033[93m'.\033[0m"
        echo "0" >"$exit_code_file"
      fi
    else
      echo "0" >"$exit_code_file"
    fi
  ) 2>&1 1>&3 | sed -e 's/^/> /g') 3>&1 | sed -e '1!s/^\([^>]\)/> \1/g'
  exit_code="$(cat "$exit_code_file")"
  rm "$exit_code_file"
  exit "$exit_code"
}

autocomplete() {
  branch_name="$((git branch -a | cut -c3- ; git tag) | sed -e 's/remotes\/[[:alnum:]]\+\///g' | grep "^$1" | head -n 1)"
  if [ "$branch_name" == "" ]; then
    echo "$1"
  else
    echo "$branch_name"
  fi
}

validate-branch-name() {
  (git branch -a | cut -c3- ; git tag) | sed -e 's/remotes\/[[:alnum:]]\+\///g' | grep -q "^$1$"
}

validate-ref-name() {
  validate-branch-name "$1" || git show "$1" >/dev/null 2>&1
}

checkout() {
  if [ "$first_command" == "1" ]; then
    color="\033[0m"
    first_command=0
  else
    color="\033[91m"
  fi
  echo -e "${color}Checking out\033[0m '\033[92m$branch\033[0m'..."
  if ( (git branch ; git tag) | grep -q "\b${branch}$" ); then
    checkout_branch="$branch"
  else
    checkout_branch="-b $branch $(git branch -a | grep "/${branch}$" | cut -d'/' -f2-3)"
  fi
  (
    git checkout $checkout_branch &&
      (git branch -D "$DETOUL_BRANCH" || [ 1 -eq 1 ]) &&
      git branch "$DETOUL_BRANCH" &&
      git checkout "$DETOUL_BRANCH"
  ) >/dev/null 2>&1 || fail
  base_branch="$branch"
}

prepare-rerere-cache() {
  hash_seed="$(
    echo "$DETOUL_BRANCH"
    echo "$branch"
  )"
  cache_name=".rr-cache-$(echo "$hash_seed" | git hash-object --stdin)"
  cd "$GIT_WD"
  (
    git checkout detoul-spec &&
      rm -fr .git/rr-cache &&
      (rmdir "$cache_name" || [ 1 -eq 1 ]) &&
      cp -R "$cache_name" .git/rr-cache
  ) >/dev/null 2>&1
  if [ "$1" == "refresh" ]; then
    cp -a "$DETOUL_TMP/orig-rr-cache/." .git/rr-cache/
  fi
}

save-rerere-cache() {
  hash_seed="$(
    echo "$DETOUL_BRANCH"
    echo "$branch"
  )"
  cache_name=".rr-cache-$(echo "$hash_seed" | git hash-object --stdin)"
  cd "$GIT_WD"
  (
    git checkout detoul-spec &&
      rm -fr "$cache_name" &&
      mv .git/rr-cache "$cache_name" &&
      git add "$cache_name" &&
      git commit -m "recorded resolution in '$DETOUL_BRANCH': '$branch'"
  ) >/dev/null 2>&1
  git checkout "$DETOUL_BRANCH" >/dev/null 2>&1
}

erase-commits-metadata() {
  git filter-branch --env-filter 'export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"; export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"; export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"' -f "$1"
}

rebase-continue() {
  git rebase --continue || (
    test -d "$(git pwd)"/.git/rebase-merge -o -d "$(git pwd)"/.git/rebase-apply &&
      !(git status --porcelain | grep -q "^.[^ ]")
  )
}

take() {
  if [ "$base_branch" == "" ]; then
    checkout
  else
    git checkout "$DETOUL_BRANCH" >/dev/null 2>&1
    cached_commit_key="$(detoul-cache hash take $@)"
    if [ "$3" == "" ]; then
      if [ "$1" == "" ]; then
        echo -e "Taking '\033[92m$branch\033[0m'..."
      else
        echo -e "Taking '\033[92m$branch\033[0m' (\033[96m$(echo "$1" | cut -d'-' -f1)\033[0m)..."
      fi
      cached_commit="$(detoul-cache read "$cached_commit_key")"
      if [ $? -ne 0 ] || ! (git reset --hard "$cached_commit" >/dev/null 2>&1); then
        detoul-cache delete "$cached_commit_key"
      else
        return
      fi
    elif [ "$3" == "refresh" ]; then
      echo -e "\033[93mAttempting to refresh rerere cache...\033[0m" >&2
    fi
    source_branch="$(git show-ref "$branch" | cut -d' ' -f1 | head -n 1)"
    if [ "${1/squash}" != "$1" ]; then
      git checkout "$source_branch" >/dev/null 2>&1 || fail
      message="$2"
      if [ "$message" == "" ]; then
        if [ "${1/merge}" != "$1" ]; then
          message="$(git log HEAD~..HEAD --pretty=format:%s)"
        else
          message="$branch"
        fi
      fi
      author="$(git log HEAD~..HEAD --pretty=format:"%an <%ae>")"
      date="$(git log HEAD~..HEAD --pretty=format:%ai)"
      (
        git reset --soft "$(git merge-base "$base_branch" "$source_branch")" &&
          git commit -m "$message" --author="$author" --date="$date"
      ) >/dev/null 2>&1 || fail
      source_branch="$(git log HEAD~..HEAD --pretty=format:%H)"
    fi

    prepare-rerere-cache "$3"

    (
      git checkout "$DETOUL_BRANCH" &&
        (git rebase --onto "$DETOUL_BRANCH" "$base_branch" "$source_branch" || while (rebase-continue) do [ 1 -eq 1 ]; done) &&
        git checkout "$DETOUL_BRANCH" &&
        git reset --hard HEAD@{1}
    ) >/dev/null 2>&1 || {
      if [ "$3" == "refresh" ]; then
        fail
      else
        git rebase --abort
        take "$1" "$2" refresh
        return
      fi
    }
    if [ "$3" == "refresh" ]; then
      save-rerere-cache
    fi

    (
      erase-commits-metadata "$DETOUL_BRANCH@{1}".."$DETOUL_BRANCH"
    ) >/dev/null 2>&1 || fail
    
    if [ "${1/merge}" != "$1" ]; then
      (
        bash -c "git filter-branch --parent-filter 'cat; echo \"-p $source_branch\"' -f HEAD~..HEAD"
      ) >/dev/null 2>&1 || fail
    fi

    detoul-cache write "$cached_commit_key" "$(git log HEAD~..HEAD --pretty=format:%H)"
  fi
}

pick() {
  if [ "$base_branch" == "" ]; then
    branch="${command[1]}"
    checkout
  else
    echo -e "Picking '\033[92m${command[1]}\033[0m'..."
    (
      git cherry-pick "${command[1]}"
    ) >/dev/null 2>&1 || fail
  fi
}

base_branch=""

while read -r line; do
  if [ "$line" == "" ]; then
    continue
  fi
  command=($line)
  export branch="$(autocomplete "${command[1]//\*/.*}")"
  (make-detoul-dependency "$branch") || fail
  if ! validate-ref-name "$branch" ; then
    echo -e "\033[31mReference not found: '$branch'.\033[0m" >&2
    fail
  fi
  case "${command[0]}" in
    checkout)
      checkout
      ;;
    take)
      take
      ;;
    take-merge)
      take merge-squash "$(echo "$line" | sed -e 's/^take-merge\s\+[[:graph:]]\+\s*//')"
      ;;
    take-squash)
      take squash "$(echo "$line" | sed -e 's/^take-squash\s\+[[:graph:]]\+\s*//')"
      ;;
    pick)
      pick
      ;;
    exec)
      echo -e "\033[91mExecuting\033[0m '\033[92m${line/exec /}\033[0m'..."
      cd "$GIT_WD"
      bash -c "${line/exec /}" || fail
      ;;
    *)
      echo -e "\033[31mUnknown directive '${command[0]}'.\033[0m" >&2
      fail
      ;;
  esac
done

quit
